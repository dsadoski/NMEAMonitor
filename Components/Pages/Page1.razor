@using NMEAMon.Models
@using NMEAMon.Services

@inject UdpListenerService UdpService
@inject NmeaService  nmeaService;

<!--<h3>Page1</h3>
<p>This is the first page.</p>-->
<h3>UDP Messages:</h3>

<ul>
    <span>	latitude	</span>
    <span>@record.latitude	</span><br />    
    <span>	longitude	</span>
    <span>@record.longitude	</span>
    <br />    
    <span>	time	</span>
    <span>@time.ToShortDateString(), @time.ToShortTimeString()	</span>
    <br />
    <span>	depth	</span>
    <span>@record.depth	</span>
    <br />
    <span>	headingMag	</span>
    <span>@record.headingMag	</span>
    <br />
    <span>	headingTrue	</span>
    <span>@record.headingTrue	</span>
    <br />
    <span>	SOG	</span>
    <span>@record.SOG	</span>
    <br />
    <span>	COG	</span>
    <span>@record.COG	</span>
    <br />
    <span>	SOW	</span>
    <span>@record.SOW	</span>
    <br />
    <span>	windTrueDir	</span>
    <span>@record.windTrueDir	</span>
    <br />
    <span>	windTrueSpeed	</span>
    <span>@record.windTrueSpeed	</span>
    <br />
    <span>	windAppDir	</span>
    <span>@record.windAppDir	</span>
    <br />
    <span>	windAppSpeed	</span>
    <span>@record.windAppSpeed	</span>
    <br />
    <span>	VPWSPD	</span>
    <span>@record.VPWSPD	</span>
    <br />
    <span>	POLARDATA	</span>
    <span>@record.POLARDATA	</span>
    <br />
    <span>Water Tempt</span>
    <span>@record.waterTemp</span>
    <br
    <span>Voltage</span>
    <span>@record.voltage</span>
    <br />
    <span>Error Message</span>
    <span>@record.ErrMessage</span>



</ul>
@code {
    private List<string> messages = new();
    private Record record;
    private DateTime time;

    protected override void OnInitialized()
    {
        record = new Record();
        UdpService.OnMessageReceived += HandleUdpMessage;
        UdpService.Start();
    }

    private void HandleUdpMessage(Record n2krecord)
    {
        InvokeAsync(() =>
        {
            record = n2krecord;
            time = new DateTime(record.time);
            //record = nmeaService.ParseSentence(msg, record);
            //messages.Add(msg);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        UdpService.OnMessageReceived -= HandleUdpMessage;
        UdpService.Stop();
    }
}

