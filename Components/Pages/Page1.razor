@using NMEAMon.Models
@using NMEAMon.Services

@inject UdpListenerService UdpService
@inject NmeaService  nmeaService;
@inject GPSService gpsService;

<!--<h3>Page1</h3>
<p>This is the first page.</p>-->
<h3>UDP Messages:</h3>
<table>
    <tr>
        <td style="vertical-align: top;">
<ul>
    <span>	latitude	</span>
    <span>@record.latitude	</span><br />    
    <span>	longitude	</span>
    <span>@record.longitude	</span>
    <br />    
    <span>	time	</span>
    <span>@time.ToShortDateString(), @time.ToShortTimeString()	</span>
    <br />
    <span>	depth	</span>
    <span>@record.depth	</span>
    <br />
    <span>	headingMag	</span>
    <span>@record.headingMag	</span>
    <br />
    <span>	headingTrue	</span>
    <span>@record.headingTrue	</span>
    <br />
    <span>	SOG	</span>
    <span>@record.SOG	</span>
    <br />
    <span>	COG	</span>
    <span>@record.COG	</span>
    <br />
    <span>	SOW	</span>
    <span>@record.SOW	</span>
    <br />
    <span>	windTrueDir	</span>
    <span>@record.windTrueDir	</span>
    <br />
    <span>Wind True Compass</span>
                <span>@record.windTrueCompass</span>
                <br />
    <span>	windTrueSpeed	</span>
    <span>@record.windTrueSpeed	</span>
    <br />
    <span>	windAppDir	</span>
    <span>@record.windAppDir	</span>
    <br />
    <span>	windAppSpeed	</span>
    <span>@record.windAppSpeed	</span>
    <br />
    <span>	VPWSPD	</span>
    <span>@record.VPWSPD	</span>
    <br />
    <span>	POLARDATA	</span>
    <span>@record.POLARDATA	</span>
    <br />
    <span>Water Tempt</span>
    <span>@record.waterTemp</span>
    <br
    <span>Voltage</span>
    <span>@record.voltage</span>
    <br />
    <span>Error Message</span>
    <span>@record.ErrMessage</span>
            </ul>
        </td>
        <td style="vertical-align: top;">
            <ul>
                @foreach (var msg in messages)
                {
                    <li>@msg</li>
                }
            </ul>
            </td>
    </tr>
</table>

@code {
    private List<string> messages = new();
    private Record record;
    private DateTime time;
    private NmeaService nmea;
    protected override void OnInitialized()
    {
        nmea = new NmeaService(new Setup());
        record = new Record();
        UdpService.OnMessageReceived += HandleUdpMessage;
        UdpService.Start();

        gpsService.OnLocationReceived += HandleGpsLocation;
        gpsService.Start();
    }

    private void HandleUdpMessage(Record n2krecord)
    {
        InvokeAsync(() =>
        {
            record = n2krecord;
            time = new DateTime(record.time);
            //record = nmeaService.ParseSentence(msg);
            if(record.ErrMessage != string.Empty)
            {
                if (!messages.Contains(record.ErrMessage))
                {
                    messages.Add(record.ErrMessage);
                }
            }
            //messages.Add(msg);
            StateHasChanged();
        });
    }

    private void HandleGpsLocation(Location location)
    {
        InvokeAsync(() =>
        {
            record.latitude = location.Latitude;
            record.longitude = location.Longitude;
            record.SOG = location.Speed ?? 0.0; // Fixes CS0266 and CS8629
            record.SOG = record.SOG * 1.94384; // Convert m/s to knots
            record.COG = location.Course ?? 0.0; // Fixes CS0266 and CS8629

            if (record.location == null)
            {
                record.location = location;
            }

            // can we calc COG/SOG from  2 points?
            TimeSpan timeSpan = new TimeSpan(location.Timestamp.Ticks - record.location.Timestamp.Ticks);
            // can we calc COG/SOG from  2 points?


            if (timeSpan.TotalSeconds > 5)
            {
                double distance = nmea.CalcDistanceNM(record.location, location); // in nautical miles
                record.SOG = distance / (timeSpan.TotalSeconds / 3600.0); // knots
                double bearing = nmea.CalcBearing(record.location, location);
                record.headingTrue = bearing;
                record.COG = bearing;

                record.location = location;
                record = nmea.CalculateWind(record);
            }




            StateHasChanged();
        });
    }

    public void Dispose()
    {
        UdpService.OnMessageReceived -= HandleUdpMessage;
        //UdpService.Stop();

        gpsService.OnLocationReceived -= HandleGpsLocation;
        //gpsService.Stop();
    }
}

